$date
	Sat Aug 09 02:11:37 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_verify_global_io $end
$var wire 51 ! nout [50:0] $end
$var reg 1 " acm_en $end
$var reg 1 # clk $end
$var reg 15 $ macout_a [14:0] $end
$var reg 15 % macout_b [14:0] $end
$var reg 1 & rstn $end
$var reg 1 ' st $end
$var reg 1 ( wwidth $end
$var integer 32 ) errors [31:0] $end
$scope module uut $end
$var wire 1 " acm_en $end
$var wire 1 # clk $end
$var wire 15 * macout_a [14:0] $end
$var wire 15 + macout_b [14:0] $end
$var wire 1 & rstn $end
$var wire 1 ' st $end
$var wire 1 ( wwidth $end
$var wire 51 , nout [50:0] $end
$var wire 27 - adder_b_input [26:0] $end
$var wire 27 . adder_a_input [26:0] $end
$var wire 27 / add_out [26:0] $end
$scope module acc_inst $end
$var wire 27 0 a [26:0] $end
$var wire 1 " acm_en $end
$var wire 1 # clk $end
$var wire 51 1 nout [50:0] $end
$var wire 1 & rstn $end
$var wire 1 ' st $end
$var wire 51 2 sum_result [50:0] $end
$var wire 51 3 shifted_nout_1 [50:0] $end
$var reg 51 4 nout_1 [50:0] $end
$scope module se_cla_inst $end
$var wire 27 5 a [26:0] $end
$var wire 51 6 b [50:0] $end
$var wire 27 7 sum_low [26:0] $end
$var wire 24 8 sum_high [23:0] $end
$var wire 51 9 sum [50:0] $end
$var wire 1 : carry_out $end
$var wire 51 ; a_ext [50:0] $end
$scope module add_low $end
$var wire 27 < a [26:0] $end
$var wire 28 = a_signed [27:0] $end
$var wire 27 > b [26:0] $end
$var wire 28 ? b_signed [27:0] $end
$var wire 1 @ sus $end
$var wire 28 A sum [27:0] $end
$var parameter 32 B width $end
$upscope $end
$scope module s_cla_inst $end
$var wire 24 C a [23:0] $end
$var wire 24 D b [23:0] $end
$var wire 1 : cin $end
$var wire 24 E g [23:0] $end
$var wire 24 F p [23:0] $end
$var wire 24 G sum [23:0] $end
$var wire 7 H c_block [6:0] $end
$var wire 25 I c [24:0] $end
$var wire 6 J bp [5:0] $end
$var wire 6 K bg [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module add_inst $end
$var wire 27 L a [26:0] $end
$var wire 28 M a_signed [27:0] $end
$var wire 27 N b [26:0] $end
$var wire 28 O b_signed [27:0] $end
$var wire 1 P sus $end
$var wire 28 Q sum [27:0] $end
$var parameter 32 R width $end
$upscope $end
$upscope $end
$scope task check_output $end
$var reg 51 S expected_nout [50:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11011 R
b11011 B
$end
#0
$dumpvars
bx S
b0 Q
0P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 A
0@
b0 ?
b0 >
b0 =
b0 <
b0 ;
0:
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
1'
0&
b0 %
b0 $
0#
0"
b0 !
$end
#5000
1#
#10000
0#
1&
#15000
1#
#20000
0#
b0 S
#25000
1#
#26000
b1010 2
b1010 9
b1010 7
b1010 ;
b1010 A
b1010 =
b1010 /
b1010 0
b1010 5
b1010 <
b1111100111 %
b1111100111 +
b1010 Q
b1010 M
b1010 .
b1010 L
b1010 $
b1010 *
1"
0'
#30000
0#
#35000
b11110 2
b11110 9
b11110 7
b11110 A
b10100 ?
b10100 >
b10100 3
b10100 6
b1010 !
b1010 ,
b1010 1
b1010 4
b1010 S
1#
#36000
b101000 2
b101000 9
b101000 7
b10100 ;
b101000 A
b10100 =
b10100 /
b10100 0
b10100 5
b10100 <
b1101111000 %
b1101111000 +
b10100 Q
b10100 M
b10100 .
b10100 L
b10100 $
b10100 *
#40000
0#
#45000
b1100100 2
b1100100 9
b1100100 7
b1100100 A
b1010000 ?
b1010000 >
b1010000 3
b1010000 6
b101000 !
b101000 ,
b101000 1
b101000 4
b101000 S
1#
#46000
b1101110 2
b1101110 9
b1101110 7
b11110 ;
b1101110 A
b11110 =
b11110 /
b11110 0
b11110 5
b11110 <
b1100001001 %
b1100001001 +
b11110 Q
b11110 M
b11110 .
b11110 L
b11110 $
b11110 *
#50000
0#
#55000
b11111010 2
b11111010 9
b11111010 7
b11111010 A
b11011100 ?
b11011100 >
b11011100 3
b11011100 6
b1101110 !
b1101110 ,
b1101110 1
b1101110 4
b1101110 S
1#
#56000
1'
#60000
0#
#65000
b11110 2
b11110 9
b11110 7
b11110 A
b0 ?
b0 >
b0 3
b0 6
b0 !
b0 ,
b0 1
b0 4
1#
#66000
b1000000001010 2
b1000000001010 9
b1000000001010 7
b1000000001010 ;
b1000000001010 A
b1000000001010 =
b1000000001010 /
b1000000001010 0
b1000000001010 5
b1000000001010 <
b1000000000000 O
b1000000000000 -
b1000000000000 N
b1 %
b1 +
b1000000001010 Q
b1010 M
b1010 .
b1010 L
b1010 $
b1010 *
1(
0'
#70000
0#
#75000
b11000000011110 2
b11000000011110 9
b11000000011110 7
b11000000011110 A
b10000000010100 ?
b10000000010100 >
b10000000010100 3
b10000000010100 6
b1000000001010 !
b1000000001010 ,
b1000000001010 1
b1000000001010 4
b1000000001010 S
1#
#76000
b100000000101000 2
b100000000101000 9
b100000000101000 7
b10000000000000 O
b10000000000000 -
b10000000000000 N
b10000000010100 ;
b100000000101000 A
b10000000010100 =
b10000000010100 /
b10000000010100 0
b10000000010100 5
b10000000010100 <
b10 %
b10 +
b10000000010100 Q
b10100 M
b10100 .
b10100 L
b10100 $
b10100 *
#80000
0#
#85000
b1010000001100100 2
b1010000001100100 9
b1010000001100100 7
b1010000001100100 A
b1000000001010000 ?
b1000000001010000 >
b1000000001010000 3
b1000000001010000 6
b100000000101000 !
b100000000101000 ,
b100000000101000 1
b100000000101000 4
b100000000101000 S
1#
#86000
1'
#90000
0#
#95000
b10000000010100 2
b10000000010100 9
b10000000010100 7
b10000000010100 A
b0 ?
b0 >
b0 3
b0 6
b0 !
b0 ,
b0 1
b0 4
1#
#96000
b1100100 2
b1100100 9
b1100100 7
b1100100 ;
b1100100 A
b1100100 =
b1100100 /
b1100100 0
b1100100 5
b1100100 <
b0 O
b0 -
b0 N
b1100100 Q
b1100100 M
b1100100 .
b1100100 L
b1100100 $
b1100100 *
0(
0'
#100000
0#
#105000
b100101100 2
b100101100 9
b100101100 7
b100101100 A
b11001000 ?
b11001000 >
b11001000 3
b11001000 6
b1100100 !
b1100100 ,
b1100100 1
b1100100 4
b1100100 S
1#
#106000
b11111010 2
b11111010 9
b11111010 7
b110010 ;
b11111010 A
b110010 =
b110010 /
b110010 0
b110010 5
b110010 <
b110010 Q
b110010 M
b110010 .
b110010 L
b110010 $
b110010 *
0"
#110000
0#
#115000
1#
#116000
b11001101 2
b11001101 9
b11001101 7
b101 ;
b11001101 A
b101 =
b101 /
b101 0
b101 5
b101 <
b101 Q
b101 M
b101 .
b101 L
b101 $
b101 *
1"
#120000
0#
#125000
b110011111 2
b110011111 9
b110011111 7
b110011111 A
b110011010 ?
b110011010 >
b110011010 3
b110011010 6
b11001101 !
b11001101 ,
b11001101 1
b11001101 4
b11001101 S
1#
#126000
b110011011 2
b110011011 9
b110011011 7
b1 ;
b110011011 A
b1 =
b1 /
b1 0
b1 5
b1 <
b1 Q
b1 M
b1 .
b1 L
b1 $
b1 *
#130000
0#
#135000
b1100110111 2
b1100110111 9
b1100110111 7
b1100110111 A
b1100110110 ?
b1100110110 >
b1100110110 3
b1100110110 6
b110011011 !
b110011011 ,
b110011011 1
b110011011 4
b110011011 S
1#
#136000
b1100111000 2
b1100111000 9
b1100111000 7
b10 ;
b1100111000 A
b10 =
b10 /
b10 0
b10 5
b10 <
b10 Q
b10 M
b10 .
b10 L
b10 $
b10 *
#140000
0#
#145000
b11001110010 2
b11001110010 9
b11001110010 7
b11001110010 A
b11001110000 ?
b11001110000 >
b11001110000 3
b11001110000 6
b1100111000 !
b1100111000 ,
b1100111000 1
b1100111000 4
b1100111000 S
1#
#146000
1'
#150000
0#
#155000
b10 2
b10 9
b10 7
b10 A
b0 ?
b0 >
b0 3
b0 6
b0 !
b0 ,
b0 1
b0 4
b0 S
1#
#156000
b1100011 2
b1100011 9
b1100011 7
b1100011 ;
b1100011 A
b1100011 =
b1100011 /
b1100011 0
b1100011 5
b1100011 <
b1100011 Q
b1100011 M
b1100011 .
b1100011 L
b1100011 $
b1100011 *
0'
#160000
0#
#165000
b100101001 2
b100101001 9
b100101001 7
b100101001 A
b11000110 ?
b11000110 >
b11000110 3
b11000110 6
b1100011 !
b1100011 ,
b1100011 1
b1100011 4
b1100011 S
1#
#170000
0#
#175000
b1010110101 2
b1010110101 9
b1010110101 7
b1010110101 A
b1001010010 ?
b1001010010 >
b1001010010 3
b1001010010 6
b100101001 !
b100101001 ,
b100101001 1
b100101001 4
1#
#180000
0#
#185000
b10111001101 2
b10111001101 9
b10111001101 7
b10111001101 A
b10101101010 ?
b10101101010 >
b10101101010 3
b10101101010 6
b1010110101 !
b1010110101 ,
b1010110101 1
b1010110101 4
1#
#186000
