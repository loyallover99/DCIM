$date
	Fri Aug 08 19:21:12 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_global_io $end
$var wire 51 ! nout [50:0] $end
$var reg 1 " acm_en $end
$var reg 1 # clk $end
$var reg 15 $ macout_a [14:0] $end
$var reg 15 % macout_b [14:0] $end
$var reg 1 & rstn $end
$var reg 1 ' st $end
$var reg 1 ( wwidth $end
$scope module uut $end
$var wire 1 " acm_en $end
$var wire 1 # clk $end
$var wire 15 ) macout_a [14:0] $end
$var wire 15 * macout_b [14:0] $end
$var wire 1 & rstn $end
$var wire 1 ' st $end
$var wire 1 ( wwidth $end
$var wire 51 + nout [50:0] $end
$var wire 27 , adder_b_input [26:0] $end
$var wire 27 - adder_a_input [26:0] $end
$var wire 27 . add_out [26:0] $end
$scope module acc_inst $end
$var wire 27 / a [26:0] $end
$var wire 1 " acm_en $end
$var wire 1 # clk $end
$var wire 51 0 nout [50:0] $end
$var wire 1 & rstn $end
$var wire 1 ' st $end
$var wire 51 1 sum_result [50:0] $end
$var wire 51 2 shifted_nout_1 [50:0] $end
$var reg 51 3 nout_1 [50:0] $end
$scope module se_cla_inst $end
$var wire 27 4 a [26:0] $end
$var wire 51 5 b [50:0] $end
$var wire 27 6 sum_low [26:0] $end
$var wire 24 7 sum_high [23:0] $end
$var wire 51 8 sum [50:0] $end
$var wire 1 9 carry_out $end
$var wire 51 : a_ext [50:0] $end
$scope module add_low $end
$var wire 27 ; a [26:0] $end
$var wire 28 < a_signed [27:0] $end
$var wire 27 = b [26:0] $end
$var wire 28 > b_signed [27:0] $end
$var wire 1 ? sus $end
$var wire 28 @ sum [27:0] $end
$var parameter 32 A width $end
$upscope $end
$scope module s_cla_inst $end
$var wire 24 B a [23:0] $end
$var wire 24 C b [23:0] $end
$var wire 1 9 cin $end
$var wire 24 D g [23:0] $end
$var wire 24 E p [23:0] $end
$var wire 24 F sum [23:0] $end
$var wire 7 G c_block [6:0] $end
$var wire 25 H c [24:0] $end
$var wire 6 I bp [5:0] $end
$var wire 6 J bg [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module add_inst $end
$var wire 27 K a [26:0] $end
$var wire 28 L a_signed [27:0] $end
$var wire 27 M b [26:0] $end
$var wire 28 N b_signed [27:0] $end
$var wire 1 O sus $end
$var wire 28 P sum [27:0] $end
$var parameter 32 Q width $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11011 Q
b11011 A
$end
#0
$dumpvars
b0 P
0O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 @
0?
b0 >
b0 =
b0 <
b0 ;
b0 :
09
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
1'
0&
b0 %
b0 $
0#
0"
b0 !
$end
#5000
1#
#10000
0#
1&
#15000
1#
#20000
0#
#25000
1#
#26000
b1010 1
b1010 8
b1010 6
b1010 :
b1010 @
b1010 <
b1010 .
b1010 /
b1010 4
b1010 ;
b1111100111 %
b1111100111 *
b1010 P
b1010 L
b1010 -
b1010 K
b1010 $
b1010 )
1"
0'
#30000
0#
#35000
b11110 1
b11110 8
b11110 6
b11110 @
b10100 >
b10100 =
b10100 2
b10100 5
b1010 !
b1010 +
b1010 0
b1010 3
1#
#36000
b101000 1
b101000 8
b101000 6
b10100 :
b101000 @
b10100 <
b10100 .
b10100 /
b10100 4
b10100 ;
b1101111000 %
b1101111000 *
b10100 P
b10100 L
b10100 -
b10100 K
b10100 $
b10100 )
#40000
0#
#45000
b1100100 1
b1100100 8
b1100100 6
b1100100 @
b1010000 >
b1010000 =
b1010000 2
b1010000 5
b101000 !
b101000 +
b101000 0
b101000 3
1#
#46000
b1101110 1
b1101110 8
b1101110 6
b11110 :
b1101110 @
b11110 <
b11110 .
b11110 /
b11110 4
b11110 ;
b1100001001 %
b1100001001 *
b11110 P
b11110 L
b11110 -
b11110 K
b11110 $
b11110 )
#50000
0#
#55000
b11111010 1
b11111010 8
b11111010 6
b11111010 @
b11011100 >
b11011100 =
b11011100 2
b11011100 5
b1101110 !
b1101110 +
b1101110 0
b1101110 3
1#
#56000
1'
#60000
0#
#65000
b11110 1
b11110 8
b11110 6
b11110 @
b0 >
b0 =
b0 2
b0 5
b0 !
b0 +
b0 0
b0 3
1#
#66000
b1000000001010 1
b1000000001010 8
b1000000001010 6
b1000000001010 :
b1000000001010 @
b1000000001010 <
b1000000001010 .
b1000000001010 /
b1000000001010 4
b1000000001010 ;
b1000000000000 N
b1000000000000 ,
b1000000000000 M
b1 %
b1 *
b1000000001010 P
b1010 L
b1010 -
b1010 K
b1010 $
b1010 )
1(
0'
#70000
0#
#75000
b11000000011110 1
b11000000011110 8
b11000000011110 6
b11000000011110 @
b10000000010100 >
b10000000010100 =
b10000000010100 2
b10000000010100 5
b1000000001010 !
b1000000001010 +
b1000000001010 0
b1000000001010 3
1#
#76000
b100000000101000 1
b100000000101000 8
b100000000101000 6
b10000000000000 N
b10000000000000 ,
b10000000000000 M
b10000000010100 :
b100000000101000 @
b10000000010100 <
b10000000010100 .
b10000000010100 /
b10000000010100 4
b10000000010100 ;
b10 %
b10 *
b10000000010100 P
b10100 L
b10100 -
b10100 K
b10100 $
b10100 )
#80000
0#
#85000
b1010000001100100 1
b1010000001100100 8
b1010000001100100 6
b1010000001100100 @
b1000000001010000 >
b1000000001010000 =
b1000000001010000 2
b1000000001010000 5
b100000000101000 !
b100000000101000 +
b100000000101000 0
b100000000101000 3
1#
#86000
1'
#90000
0#
#95000
b10000000010100 1
b10000000010100 8
b10000000010100 6
b10000000010100 @
b0 >
b0 =
b0 2
b0 5
b0 !
b0 +
b0 0
b0 3
1#
#96000
b1100100 1
b1100100 8
b1100100 6
b1100100 :
b1100100 @
b1100100 <
b1100100 .
b1100100 /
b1100100 4
b1100100 ;
b0 N
b0 ,
b0 M
b1100100 P
b1100100 L
b1100100 -
b1100100 K
b1100100 $
b1100100 )
0(
0'
#100000
0#
#105000
b100101100 1
b100101100 8
b100101100 6
b100101100 @
b11001000 >
b11001000 =
b11001000 2
b11001000 5
b1100100 !
b1100100 +
b1100100 0
b1100100 3
1#
#106000
b11111010 1
b11111010 8
b11111010 6
b110010 :
b11111010 @
b110010 <
b110010 .
b110010 /
b110010 4
b110010 ;
b110010 P
b110010 L
b110010 -
b110010 K
b110010 $
b110010 )
0"
#110000
0#
#115000
1#
#116000
b11001101 1
b11001101 8
b11001101 6
b101 :
b11001101 @
b101 <
b101 .
b101 /
b101 4
b101 ;
b101 P
b101 L
b101 -
b101 K
b101 $
b101 )
1"
#120000
0#
#125000
b110011111 1
b110011111 8
b110011111 6
b110011111 @
b110011010 >
b110011010 =
b110011010 2
b110011010 5
b11001101 !
b11001101 +
b11001101 0
b11001101 3
1#
#126000
b110011011 1
b110011011 8
b110011011 6
b1 :
b110011011 @
b1 <
b1 .
b1 /
b1 4
b1 ;
b1 P
b1 L
b1 -
b1 K
b1 $
b1 )
#130000
0#
#135000
b1100110111 1
b1100110111 8
b1100110111 6
b1100110111 @
b1100110110 >
b1100110110 =
b1100110110 2
b1100110110 5
b110011011 !
b110011011 +
b110011011 0
b110011011 3
1#
#136000
b1100111000 1
b1100111000 8
b1100111000 6
b10 :
b1100111000 @
b10 <
b10 .
b10 /
b10 4
b10 ;
b10 P
b10 L
b10 -
b10 K
b10 $
b10 )
#140000
0#
#145000
b11001110010 1
b11001110010 8
b11001110010 6
b11001110010 @
b11001110000 >
b11001110000 =
b11001110000 2
b11001110000 5
b1100111000 !
b1100111000 +
b1100111000 0
b1100111000 3
1#
#146000
1'
#150000
0#
#155000
b10 1
b10 8
b10 6
b10 @
b0 >
b0 =
b0 2
b0 5
b0 !
b0 +
b0 0
b0 3
1#
#156000
b1100011 1
b1100011 8
b1100011 6
b1100011 :
b1100011 @
b1100011 <
b1100011 .
b1100011 /
b1100011 4
b1100011 ;
b1100011 P
b1100011 L
b1100011 -
b1100011 K
b1100011 $
b1100011 )
0'
#160000
0#
#165000
b100101001 1
b100101001 8
b100101001 6
b100101001 @
b11000110 >
b11000110 =
b11000110 2
b11000110 5
b1100011 !
b1100011 +
b1100011 0
b1100011 3
1#
#170000
0#
#175000
b1010110101 1
b1010110101 8
b1010110101 6
b1010110101 @
b1001010010 >
b1001010010 =
b1001010010 2
b1001010010 5
b100101001 !
b100101001 +
b100101001 0
b100101001 3
1#
#180000
0#
#185000
b10111001101 1
b10111001101 8
b10111001101 6
b10111001101 @
b10101101010 >
b10101101010 =
b10101101010 2
b10101101010 5
b1010110101 !
b1010110101 +
b1010110101 0
b1010110101 3
1#
#186000
