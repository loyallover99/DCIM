$date
	Sat Aug 09 02:11:18 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_verify_s_cla $end
$var wire 24 ! sum [23:0] $end
$var reg 24 " a [23:0] $end
$var reg 24 # b [23:0] $end
$var reg 1 $ cin $end
$var integer 32 % errors [31:0] $end
$scope module uut $end
$var wire 24 & a [23:0] $end
$var wire 24 ' b [23:0] $end
$var wire 1 $ cin $end
$var wire 24 ( g [23:0] $end
$var wire 24 ) p [23:0] $end
$var wire 24 * sum [23:0] $end
$var wire 7 + c_block [6:0] $end
$var wire 25 , c [24:0] $end
$var wire 6 - bp [5:0] $end
$var wire 6 . bg [5:0] $end
$upscope $end
$scope task check_output $end
$var reg 24 / expected_sum [23:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
0$
b0 #
b0 "
b0 !
$end
#10000
b10000 +
b1000 .
b11110000001100010 ,
b10000010001101010 !
b10000010001101010 *
b1000000110001 (
b1110010000001000 )
b10000010001101010 /
b1101010000110001 #
b1101010000110001 '
b11000000111001 "
b11000000111001 &
#20000
b0 .
b11111 !
b11111 *
b1 ,
b0 (
b11110 )
b11111 /
b1 +
1$
b10100 #
b10100 '
b1010 "
b1010 &
#30000
b111111 -
b111111111111111111111111 !
b111111111111111111111111 *
b0 ,
b111111111111111111111111 )
b111111111111111111111111 /
b0 +
0$
b0 #
b0 '
b111111111111111111111111 "
b111111111111111111111111 &
#40000
b1111110 +
b1 .
b1111111111111111111111110 ,
b111110 -
b0 !
b0 *
b1 (
b111111111111111111111110 )
b0 /
b1 #
b1 '
#50000
b111111 .
b0 -
b111111111111111111111111 !
b111111111111111111111111 *
b1111111111111111111111111 ,
b111111111111111111111111 (
b0 )
b111111111111111111111111 /
b1111111 +
1$
b111111111111111111111111 #
b111111111111111111111111 '
#60000
b11 .
b111100 -
b110010 !
b110010 *
b1111111111111111110011000 ,
b1000100 (
b111111111111111110101010 )
b110010 /
b1111110 +
0$
b111111111111111111001110 #
b111111111111111111001110 '
b1100100 "
b1100100 &
#70000
b0 +
b0 .
b1100000 ,
b111111111111111111001110 !
b111111111111111111001110 *
b10000 (
b111111111111111110101110 )
b111111111111111111001110 /
b110010 #
b110010 '
b111111111111111110011100 "
b111111111111111110011100 &
#80000
b1111110 +
b111111 .
b1111111111111111100111000 ,
b0 -
b111111111111111101101010 !
b111111111111111101101010 *
b111111111111111110001100 (
b1010010 )
b111111111111111101101010 /
b111111111111111111001110 #
b111111111111111111001110 '
#110000
