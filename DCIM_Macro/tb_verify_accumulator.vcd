$date
	Sat Aug 09 02:11:22 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_verify_accumulator $end
$var wire 51 ! nout [50:0] $end
$var reg 27 " a [26:0] $end
$var reg 1 # acm_en $end
$var reg 1 $ clk $end
$var reg 1 % rstn $end
$var reg 1 & st $end
$var integer 32 ' errors [31:0] $end
$scope module uut $end
$var wire 27 ( a [26:0] $end
$var wire 1 # acm_en $end
$var wire 1 $ clk $end
$var wire 51 ) nout [50:0] $end
$var wire 1 % rstn $end
$var wire 1 & st $end
$var wire 51 * sum_result [50:0] $end
$var wire 51 + shifted_nout_1 [50:0] $end
$var reg 51 , nout_1 [50:0] $end
$scope module se_cla_inst $end
$var wire 27 - a [26:0] $end
$var wire 51 . b [50:0] $end
$var wire 27 / sum_low [26:0] $end
$var wire 24 0 sum_high [23:0] $end
$var wire 51 1 sum [50:0] $end
$var wire 1 2 carry_out $end
$var wire 51 3 a_ext [50:0] $end
$scope module add_low $end
$var wire 27 4 a [26:0] $end
$var wire 28 5 a_signed [27:0] $end
$var wire 27 6 b [26:0] $end
$var wire 28 7 b_signed [27:0] $end
$var wire 1 8 sus $end
$var wire 28 9 sum [27:0] $end
$var parameter 32 : width $end
$upscope $end
$scope module s_cla_inst $end
$var wire 24 ; a [23:0] $end
$var wire 24 < b [23:0] $end
$var wire 1 2 cin $end
$var wire 24 = g [23:0] $end
$var wire 24 > p [23:0] $end
$var wire 24 ? sum [23:0] $end
$var wire 7 @ c_block [6:0] $end
$var wire 25 A c [24:0] $end
$var wire 6 B bp [5:0] $end
$var wire 6 C bg [5:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task check_output $end
$var reg 51 D expected_nout [50:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11011 :
$end
#0
$dumpvars
bx D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 9
08
b0 7
b0 6
b0 5
b0 4
b0 3
02
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
1&
0%
0$
0#
b0 "
b0 !
$end
#5000
1$
#10000
0$
1%
#15000
1$
#20000
0$
b0 D
#21000
b1100100 *
b1100100 1
b1100100 /
b1100100 3
b1100100 9
b1100100 5
b1100100 "
b1100100 (
b1100100 -
b1100100 4
0&
#25000
1$
#30000
0$
#35000
1$
#40000
0$
#42000
b1010 *
b1010 1
b1010 /
b1010 3
b1010 9
b1010 5
b1010 "
b1010 (
b1010 -
b1010 4
1#
#45000
b11110 *
b11110 1
b11110 /
b11110 9
b10100 7
b10100 6
b10100 +
b10100 .
b1010 !
b1010 )
b1010 ,
b1010 D
1$
#46000
b101000 *
b101000 1
b101000 /
b10100 3
b101000 9
b10100 5
b10100 "
b10100 (
b10100 -
b10100 4
#50000
0$
#55000
b1100100 *
b1100100 1
b1100100 /
b1100100 9
b1010000 7
b1010000 6
b1010000 +
b1010000 .
b101000 !
b101000 )
b101000 ,
b101000 D
1$
#56000
b1101110 *
b1101110 1
b1101110 /
b11110 3
b1101110 9
b11110 5
b11110 "
b11110 (
b11110 -
b11110 4
#60000
0$
#65000
b11111010 *
b11111010 1
b11111010 /
b11111010 9
b11011100 7
b11011100 6
b11011100 +
b11011100 .
b1101110 !
b1101110 )
b1101110 ,
b1101110 D
1$
#66000
b11011100 *
b11011100 1
b11011100 /
b0 3
b11011100 9
b0 5
b0 "
b0 (
b0 -
b0 4
#70000
0$
#75000
b110111000 *
b110111000 1
b110111000 /
b110111000 9
b110111000 7
b110111000 6
b110111000 +
b110111000 .
b11011100 !
b11011100 )
b11011100 ,
b11011100 D
1$
#76000
b10110011111 *
b10110011111 1
b10110011111 /
b1111100111 3
b10110011111 9
b1111100111 5
b1111100111 "
b1111100111 (
b1111100111 -
b1111100111 4
1&
#80000
0$
#85000
b1111100111 *
b1111100111 1
b1111100111 /
b1111100111 9
b0 7
b0 6
b0 +
b0 .
b0 !
b0 )
b0 ,
b0 D
1$
#86000
b101 *
b101 1
b101 /
b101 3
b101 9
b101 5
b101 "
b101 (
b101 -
b101 4
0&
#90000
0$
#95000
b1111 *
b1111 1
b1111 /
b1111 9
b1010 7
b1010 6
b1010 +
b1010 .
b101 !
b101 )
b101 ,
b101 D
1$
#96000
b101 *
b101 1
b101 /
b101 9
b0 7
b0 6
b0 +
b0 .
b0 !
b0 )
b0 ,
0%
#100000
0$
#105000
1$
#106000
b0 D
#110000
0$
#115000
1$
#120000
0$
#125000
1$
#127000
