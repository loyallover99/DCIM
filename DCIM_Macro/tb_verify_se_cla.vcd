$date
	Sat Aug 09 02:11:20 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_verify_se_cla $end
$var wire 51 ! sum [50:0] $end
$var reg 27 " a [26:0] $end
$var reg 51 # b [50:0] $end
$var integer 32 $ errors [31:0] $end
$scope module uut $end
$var wire 27 % a [26:0] $end
$var wire 51 & b [50:0] $end
$var wire 27 ' sum_low [26:0] $end
$var wire 24 ( sum_high [23:0] $end
$var wire 51 ) sum [50:0] $end
$var wire 1 * carry_out $end
$var wire 51 + a_ext [50:0] $end
$scope module add_low $end
$var wire 27 , a [26:0] $end
$var wire 28 - a_signed [27:0] $end
$var wire 27 . b [26:0] $end
$var wire 28 / b_signed [27:0] $end
$var wire 1 0 sus $end
$var wire 28 1 sum [27:0] $end
$var parameter 32 2 width $end
$upscope $end
$scope module s_cla_inst $end
$var wire 24 3 a [23:0] $end
$var wire 24 4 b [23:0] $end
$var wire 1 * cin $end
$var wire 24 5 g [23:0] $end
$var wire 24 6 p [23:0] $end
$var wire 24 7 sum [23:0] $end
$var wire 7 8 c_block [6:0] $end
$var wire 25 9 c [24:0] $end
$var wire 6 : bp [5:0] $end
$var wire 6 ; bg [5:0] $end
$upscope $end
$upscope $end
$scope task check_output $end
$var reg 51 < expected_sum [50:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11011 2
$end
#0
$dumpvars
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#10000
b101000 (
b101000 7
b101000 6
b11110001110110101100110100 /
b11110001110110101100110100 .
b101000 4
b101000011110001111001101101101101 !
b101000011110001111001101101101101 )
b11110001111001101101101101 '
b101000011110001111001101101101101 <
b101000011110001110110101100110100 #
b101000011110001110110101100110100 &
b11000000111001 +
b11110001111001101101101101 1
b11000000111001 -
b11000000111001 "
b11000000111001 %
b11000000111001 ,
#20000
b11 ;
b111100 :
b101000 (
b101000 7
b101000 5
b111111111111111111010111 6
b111111111111111111111111 3
b1111111111111111111111111 9
b101000011110001110011101011111011 !
b101000011110001110011101011111011 )
b11110001110011101011111011 '
b1111111 8
1*
b101000011110001110011101011111011 <
b111111111111111111111111111111111111100111111000111 +
b1011110001110011101011111011 1
b111111111111100111111000111 -
b111111111111100111111000111 "
b111111111111100111111000111 %
b111111111111100111111000111 ,
#30000
b0 ;
b111111 :
b0 (
b0 7
b0 5
b111111111111111111111111 6
b1 /
b1 .
b0 4
b0 !
b0 )
b0 '
b0 <
b1 #
b1 &
b111111111111111111111111111111111111111111111111111 +
b1000000000000000000000000000 1
b111111111111111111111111111 -
b111111111111111111111111111 "
b111111111111111111111111111 %
b111111111111111111111111111 ,
#40000
b1111111111111111111111111 9
b1111111 8
b111111 ;
b0 :
b111111111111111111111111 (
b111111111111111111111111 7
b111111111111111111111111111111111111111111111111110 !
b111111111111111111111111111111111111111111111111110 )
b111111111111111111111111110 '
b111111111111111111111111 5
b0 6
b1111111111111111111111111110 1
b111111111111111111111111111 /
b111111111111111111111111111 .
b111111111111111111111111 4
b111111111111111111111111111111111111111111111111110 <
b111111111111111111111111111111111111111111111111111 #
b111111111111111111111111111111111111111111111111111 &
#50000
b0 ;
b0 (
b0 7
b0 5
b0 3
b0 9
b0 /
b0 .
b0 4
b0 !
b0 )
b0 '
b0 8
0*
b0 <
b0 #
b0 &
b0 +
b0 1
b0 -
b0 "
b0 %
b0 ,
#60000
b111111 :
b111111111111111111111111 (
b111111111111111111111111 7
b111111111111111111111111111111111111111111111111111 !
b111111111111111111111111111111111111111111111111111 )
b111111111111111111111111111 '
b111111111111111111111111 6
b111111111111111111111111111 1
b111111111111111111111111111 /
b111111111111111111111111111 .
b111111111111111111111111 4
b111111111111111111111111111111111111111111111111111 <
b111111111111111111111111111111111111111111111111111 #
b111111111111111111111111111111111111111111111111111 &
#70000
b0 (
b0 7
b1111111111111111111111111 9
b111111111111111111000001100 /
b111111111111111111000001100 .
b111110100 !
b111110100 )
b111110100 '
b1111111 8
1*
b111110100 <
b111111111111111111111111111111111111111111000001100 #
b111111111111111111111111111111111111111111000001100 &
b1111101000 +
b1000000000000000000111110100 1
b1111101000 -
b1111101000 "
b1111101000 %
b1111101000 ,
#80000
b1111111111111111111111111 9
b1111111 8
b111111 ;
b0 :
b111111111111111111111111 (
b111111111111111111111111 7
b111111111111111111111111 5
b0 6
b111111111111111111111111 3
b111111111111111111111111111111111111111101000100100 !
b111111111111111111111111111111111111111101000100100 )
b111111111111111101000100100 '
b111111111111111111111111111111111111111101000100100 <
b111111111111111111111111111111111111111110000011000 +
b1111111111111111101000100100 1
b111111111111111110000011000 -
b111111111111111110000011000 "
b111111111111111110000011000 %
b111111111111111110000011000 ,
#90000
b0 ;
b111111 :
b111111111111111111111111 (
b111111111111111111111111 7
b0 5
b111111111111111111111111 6
b0 3
b0 9
b111111110010000011110101011 /
b111111110010000011110101011 .
b111111111111111111111111111111110010000100000100110 !
b111111111111111111111111111111110010000100000100110 )
b111111110010000100000100110 '
b0 8
0*
b111111111111111111111111111111110010000100000100110 <
b111111111111111111111111111111110010000011110101011 #
b111111111111111111111111111111110010000011110101011 &
b1111011 +
b111111110010000100000100110 1
b1111011 -
b1111011 "
b1111011 %
b1111011 ,
#120000
