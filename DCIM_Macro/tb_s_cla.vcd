$date
	Fri Aug 08 19:20:55 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_s_cla $end
$var wire 24 ! sum [23:0] $end
$var wire 25 " expected_sum [24:0] $end
$var wire 1 # cout $end
$var reg 24 $ a [23:0] $end
$var reg 24 % b [23:0] $end
$var reg 1 & cin $end
$scope module uut $end
$var wire 24 ' a [23:0] $end
$var wire 24 ( b [23:0] $end
$var wire 1 & cin $end
$var wire 24 ) g [23:0] $end
$var wire 24 * p [23:0] $end
$var wire 24 + sum [23:0] $end
$var wire 7 , c_block [6:0] $end
$var wire 25 - c [24:0] $end
$var wire 6 . bp [5:0] $end
$var wire 6 / bg [5:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
0&
b0 %
b0 $
0#
b0 "
b0 !
$end
#10000
b10000 ,
b1000 /
b11110000001100010 -
b10000010001101010 !
b10000010001101010 +
b1000000110001 )
b1110010000001000 *
b1101010000110001 %
b1101010000110001 (
b10000010001101010 "
b11000000111001 $
b11000000111001 '
#20000
b0 /
b11111 !
b11111 +
b1 -
b0 )
b11110 *
b1 ,
1&
b10100 %
b10100 (
b11111 "
b1010 $
b1010 '
#30000
b111111 .
b111111111111111111111111 !
b111111111111111111111111 +
b0 -
b111111111111111111111111 *
b0 ,
0&
b0 %
b0 (
b111111111111111111111111 "
b111111111111111111111111 $
b111111111111111111111111 '
#40000
b1111110 ,
b1 /
b1111111111111111111111110 -
b111110 .
b0 !
b0 +
1#
b1 )
b111111111111111111111110 *
b1000000000000000000000000 "
b1 %
b1 (
#50000
b111111 /
b0 .
b111111111111111111111111 !
b111111111111111111111111 +
b1111111111111111111111111 -
b111111111111111111111111 )
b0 *
b1111111 ,
1&
b1111111111111111111111111 "
b111111111111111111111111 %
b111111111111111111111111 (
#60000
b1001001 ,
b100100 /
b1000000001011110000000111 -
b11110011011010011100101 !
b11110011011010011100101 +
b100000000101011000000001 )
b11110010000100011100010 *
b111100000101011001100011 %
b111100000101011001100011 (
b1011110011011010011100101 "
b100010010101111010000001 $
b100010010101111010000001 '
#70000
b1010001 ,
b101000 /
b1100001110000000000000011 -
b101101100110011101100111 !
b101101100110011101100111 +
b110000101000000000000001 )
b1100010110011101100100 *
b111100111110001100000001 %
b111100111110001100000001 (
b1101101100110011101100111 "
b110000101000010001100101 $
b110000101000010001100101 '
#80000
b111011 ,
b11101 /
b110111111111001111011 -
b101110111100010011001010 !
b101110111100010011001010 +
0#
b11011100010100001100 )
b101000000011101010110001 *
b1011011111011110001100 %
b1011011111011110001100 (
b101110111100010011001010 "
b100011011100110100111101 $
b100011011100110100111101 '
#90000
b1110101 ,
b111010 /
b1111111110000111110001011 -
b101001110111110010101011 !
b101001110111110010101011 +
1#
b101001111000010011000101 )
b10110000111001100100000 *
b101011111111011111100101 %
b101011111111011111100101 (
b1101001110111110010101011 "
b111101111000010011000101 $
b111101111000010011000101 '
#100000
b111111 /
b11000110111001001011101 !
b11000110111001001011101 +
b1111110010011111100011100 -
b11001001001001010001110 )
b100110100100110101000001 *
b1111110 ,
0&
b11101101001011011001110 %
b11101101001011011001110 (
b1011000110111001001011101 "
b111011001101101110001111 $
b111011001101101110001111 '
#110000
b11 /
b111100 .
b1111111111111111110011000 -
b110010 !
b110010 +
b1000100 )
b111111111111111110101010 *
b111111111111111111001110 %
b111111111111111111001110 (
b1000000000000000000110010 "
b1100100 $
b1100100 '
#120000
b0 ,
b0 /
b1100000 -
b111111111111111111001110 !
b111111111111111111001110 +
0#
b10000 )
b111111111111111110101110 *
b110010 %
b110010 (
b111111111111111111001110 "
b111111111111111110011100 $
b111111111111111110011100 '
#130000
b1111110 ,
b111111 /
b1111111111111111100111000 -
b0 .
b111111111111111101101010 !
b111111111111111101101010 +
1#
b111111111111111110001100 )
b1010010 *
b1111111111111111101101010 "
b111111111111111111001110 %
b111111111111111111001110 (
#160000
